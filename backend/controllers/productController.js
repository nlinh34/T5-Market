const Product = require("../models/Product");
const Shop = require("../models/Shop");
const { httpStatusCodes } = require("../utils/constants");
const { Role } = require("../constants/roleEnum");

const createProduct = async (req, res) => {
    try {
        const userId = req.user.userId;
        const { name, price, description, images, category, isAvailable } = req.body;

        // B·∫Øt bu·ªôc: c√≥ √≠t nh·∫•t 1 h√¨nh ·∫£nh
        if (!images || !Array.isArray(images) || images.length === 0) {
            return res.status(httpStatusCodes.BAD_REQUEST).json({
                error: "Vui l√≤ng t·∫£i l√™n √≠t nh·∫•t 1 h√¨nh ·∫£nh s·∫£n ph·∫©m.",
            });
        }

        //T√¨m shop m√† user l√† ch·ªß ho·∫∑c nh√¢n vi√™n (ƒë√£ ƒë∆∞·ª£c duy·ªát)
        const shop = await Shop.findOne({
            status: "approved",
            $or: [
                { owner: userId },
                { staffs: userId },
            ],
        }).populate("owner");

        if (!shop) {
            return res.status(httpStatusCodes.FORBIDDEN).json({
                error: "B·∫°n kh√¥ng c√≥ quy·ªÅn ƒëƒÉng s·∫£n ph·∫©m. Ch·ªâ ch·ªß shop ho·∫∑c nh√¢n vi√™n ƒë∆∞·ª£c ph√©p.",
            });
        }

        // üëâ X√°c ƒë·ªãnh seller ch√≠nh l√† ch·ªß shop
        const product = new Product({
            name,
            price,
            description,
            images,
            category,
            isAvailable: isAvailable !== undefined ? isAvailable : true,
            shop: shop._id,
            seller: shop.owner._id,
            createdBy: userId,
            status: "pending",
        });

        await product.save();

        return res.status(httpStatusCodes.CREATED).json({
            message: "S·∫£n ph·∫©m ƒë√£ ƒë∆∞·ª£c t·∫°o, ƒëang ch·ªù duy·ªát",
            data: product,
        });
    } catch (error) {
        console.error("‚ùå L·ªói khi t·∫°o s·∫£n ph·∫©m:", error);
        return res.status(httpStatusCodes.INTERNAL_SERVER_ERROR).json({
            error: "L·ªói khi t·∫°o s·∫£n ph·∫©m",
        });
    }
};


const approveProduct = async (req, res) => {
    try {
        const { id } = req.params;
        const userRole = req.user.role;

        if (![Role.ADMIN, Role.MOD, Role.MANAGER].includes(userRole)) {
            return res.status(403).json({ error: "Kh√¥ng c√≥ quy·ªÅn duy·ªát s·∫£n ph·∫©m" });
        }

        const product = await Product.findById(id);
        if (!product || product.status !== "pending") {
            return res.status(400).json({ error: "S·∫£n ph·∫©m kh√¥ng t·ªìn t·∫°i ho·∫∑c ƒë√£ x·ª≠ l√Ω" });
        }

        product.status = "approved";
        product.approvedBy = req.user.userId;
        product.approvedAt = new Date();

        await product.save();
        res.json({ message: "‚úÖ ƒê√£ duy·ªát s·∫£n ph·∫©m" });
    } catch (err) {
        console.error("‚ùå L·ªói khi duy·ªát s·∫£n ph·∫©m:", err);
        res.status(500).json({ error: "L·ªói duy·ªát s·∫£n ph·∫©m" });
    }
};


const rejectProduct = async (req, res) => {
    try {
        const { id } = req.params;
        const { reason } = req.body;

        if (![Role.ADMIN, Role.MOD, Role.MANAGER].includes(req.user.role)) {
            return res.status(403).json({ error: "Kh√¥ng c√≥ quy·ªÅn t·ª´ ch·ªëi s·∫£n ph·∫©m" });
        }

        const product = await Product.findById(id);
        if (!product || product.status !== "pending") {
            return res.status(400).json({ error: "S·∫£n ph·∫©m kh√¥ng t·ªìn t·∫°i ho·∫∑c ƒë√£ x·ª≠ l√Ω" });
        }

        product.status = "rejected";
        product.rejectedBy = req.user.userId;
        product.rejectedAt = new Date();
        product.rejectionReason = reason || "Kh√¥ng r√µ l√Ω do";

        await product.save();
        res.json({ message: "‚ùå ƒê√£ t·ª´ ch·ªëi s·∫£n ph·∫©m" });
    } catch (err) {
        res.status(500).json({ error: "L·ªói t·ª´ ch·ªëi s·∫£n ph·∫©m" });
    }
};


const getPendingProducts = async (req, res) => {
    try {
        const products = await Product.find({ status: "pending" })
            .populate("createdBy", "fullName email")
            .populate("category", "name")
            .populate("shop", "name");

        res.status(200).json({
            success: true,
            data: products,
        });
    } catch (error) {
        console.error("‚ùå L·ªói khi l·∫•y s·∫£n ph·∫©m ch·ªù duy·ªát:", error);
        res.status(500).json({ error: "L·ªói server khi l·∫•y s·∫£n ph·∫©m ch·ªù duy·ªát" });
    }
};


const getApprovedProducts = async (req, res) => {
    try {
        const products = await Product.find({ status: "approved" })
            .populate("createdBy", "fullName email")
            .populate("category", "name")
            .populate("shop", "name");

        res.status(200).json({
            success: true,
            data: products,
        });
    } catch (error) {
        console.error("‚ùå L·ªói khi l·∫•y s·∫£n ph·∫©m ƒë√£ duy·ªát:", error);
        res.status(500).json({ error: "L·ªói server khi l·∫•y s·∫£n ph·∫©m ƒë√£ duy·ªát" });
    }
};


const getRejectedProducts = async (req, res) => {
    try {
        const rejectedProducts = await Product.find({ status: "rejected" })
            .populate("shop", "name")
            .populate("seller", "name email") // ho·∫∑c createdBy n·∫øu b·∫°n mu·ªën hi·ªÉn th·ªã ng∆∞·ªùi t·∫°o b√†i
            .populate("category", "name");

        res.status(httpStatusCodes.OK).json({
            success: true,
            data: rejectedProducts,
        });
    } catch (error) {
        console.error("‚ùå L·ªói khi l·∫•y s·∫£n ph·∫©m b·ªã t·ª´ ch·ªëi:", error);
        res.status(httpStatusCodes.INTERNAL_SERVER_ERROR).json({
            error: "L·ªói khi l·∫•y danh s√°ch s·∫£n ph·∫©m b·ªã t·ª´ ch·ªëi",
        });
    }
};


const getProductById = async (req, res) => {
    try {
        const { id } = req.params;

        const product = await Product.findById(id)
            .populate("createdBy", "fullName email")
            .populate("shop", "name")
            .populate("category", "name");

        if (!product) {
            return res.status(404).json({ error: "Kh√¥ng t√¨m th·∫•y s·∫£n ph·∫©m" });
        }

        res.status(200).json({
            success: true,
            data: product,
        });
    } catch (error) {
        console.error("‚ùå L·ªói khi l·∫•y chi ti·∫øt s·∫£n ph·∫©m:", error);
        res.status(500).json({ error: "L·ªói server khi l·∫•y chi ti·∫øt s·∫£n ph·∫©m" });
    }
};


const getAllProductsByShopId = async (req, res) => {
    try {
        const { shopId } = req.params;

        const products = await Product.find({ shop: shopId })
            .populate("category", "name")
            .populate("createdBy", "name")
            .populate("shop", "name");

        res.status(200).json({ success: true, data: products });
    } catch (error) {
        console.error("‚ùå L·ªói khi l·∫•y t·∫•t c·∫£ s·∫£n ph·∫©m theo shopId:", error);
        res.status(500).json({ error: "L·ªói h·ªá th·ªëng" });
    }
};


const getApprovedProductsByShopId = async (req, res) => {
    try {
        const { shopId } = req.params;

        const products = await Product.find({
            shop: shopId,
            status: "approved",
        })
            .populate("category", "name")
            .populate("createdBy", "name")
            .populate("shop", "name");

        if (products.length === 0) {
            return res.status(200).json({
                message: "Ch∆∞a c√≥ s·∫£n ph·∫©m n√†o ƒë∆∞·ª£c duy·ªát.",
                data: [],
            });
        }

        res.status(200).json({ message: "Danh s√°ch s·∫£n ph·∫©m ƒë√£ ƒë∆∞·ª£c duy·ªát c·ªßa SHOP:", success: true, data: products });
    } catch (error) {
        console.error("‚ùå L·ªói khi l·∫•y s·∫£n ph·∫©m ƒë√£ duy·ªát:", error);
        res.status(500).json({ error: "L·ªói h·ªá th·ªëng" });
    }
};


const getPendingProductsByShopId = async (req, res) => {
    try {
        const { shopId } = req.params;

        const products = await Product.find({
            shop: shopId,
            status: "pending",
        })
            .populate("category", "name")
            .populate("createdBy", "name")
            .populate("shop", "name");

        if (products.length === 0) {
            return res.status(200).json({
                message: "Kh√¥ng c√≥ s·∫£n ph·∫©m n√†o ƒëang ch·ªù duy·ªát.",
                data: [],
            });
        }
        res.status(200).json({ message: "Danh s√°ch c√°c s·∫£n ph·∫©m ƒëang ch·ªù duy·ªát c·ªßa SHOP:", success: true, data: products });
    } catch (error) {
        console.error("‚ùå L·ªói khi l·∫•y s·∫£n ph·∫©m ch·ªù duy·ªát:", error);
        res.status(500).json({ error: "L·ªói h·ªá th·ªëng" });
    }
};


const getRejectedProductsByShopId = async (req, res) => {
    try {
        const { shopId } = req.params;

        const products = await Product.find({
            shop: shopId,
            status: "rejected",
        })
            .populate("category", "name")
            .populate("createdBy", "name")
            .populate("shop", "name");

        if (products.length === 0) {
            return res.status(200).json({
                message: "Kh√¥ng c√≥ s·∫£n ph·∫©m n√†o b·ªã t·ª´ ch·ªëi.",
                data: [],
            });
        }
        res.status(200).json({message: "Danh s√°ch s·∫£n ph·∫©m b·ªã t·ª´ ch·ªëi c·ªßa SHOP:", success: true, data: products });
    } catch (error) {
        console.error("‚ùå L·ªói khi l·∫•y s·∫£n ph·∫©m b·ªã t·ª´ ch·ªëi:", error);
        res.status(500).json({ error: "L·ªói h·ªá th·ªëng" });
    }
};



module.exports = {
    createProduct,
    approveProduct,
    rejectProduct,
    getApprovedProducts,
    getPendingProducts,
    getRejectedProducts,
    getProductById,
    getAllProductsByShopId,
    getApprovedProductsByShopId,
    getRejectedProductsByShopId,
    getPendingProductsByShopId
};